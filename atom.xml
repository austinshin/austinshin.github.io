<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Austin Shin]]></title>
  <link href="http://austinshin.github.io/atom.xml" rel="self"/>
  <link href="http://austinshin.github.io/"/>
  <updated>2018-01-22T11:25:58-08:00</updated>
  <id>http://austinshin.github.io/</id>
  <author>
    <name><![CDATA[Austin Shin]]></name>
    <email><![CDATA[shinaustin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[habits]]></title>
    <link href="http://austinshin.github.io/blog/2018/01/22/habits/"/>
    <updated>2018-01-22T10:23:33-08:00</updated>
    <id>http://austinshin.github.io/blog/2018/01/22/habits</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[legacy]]></title>
    <link href="http://austinshin.github.io/blog/2018/01/22/legacy/"/>
    <updated>2018-01-22T10:23:26-08:00</updated>
    <id>http://austinshin.github.io/blog/2018/01/22/legacy</id>
    <content type="html"><![CDATA[<h1><em>Legacy - Project Aircasa</em></h1>

<hr />

<h4>Demo</h4>

<p><a href="aircasa.herokuapp.com">Try Aircasa</a>
<a href="https://github.com/hrsf87-casa/aircasa">Github</a></p>

<h5>Summary</h5>

<ul>
<li>Adopted a Minimal Viable Product of a <a href="https://github.com/airbnb-clone/airbnb">Airbnb clone</a> from a group of people who worked on it previously hence the name &lsquo;Legacy&rsquo;.</li>
<li>Familiarized self with a new code base, refactored code, added multiple new features, and deployed to heroku.</li>
</ul>


<h4>Stack</h4>

<ul>
<li>React</li>
<li>Express</li>
<li>MYSQL

<h5>Features Added</h5></li>
<li>PassportJS/Bcrypt (Login Authentication)</li>
<li>Ability to host a place</li>
<li>Track current and past bookings</li>
<li>Unique profile page</li>
<li>Uploading files utilizing Amazon Web Services</li>
<li>Fetch live data via Airbnb API</li>
<li>Styling via Bootstrap and CSS Grid</li>
<li>Provide map data via Google Maps API</li>
</ul>


<h2>The Project Phase</h2>

<p>Interesting decisions/challenges encountered.
1. Adopting a new codebase, modularity, documentation, and refactoring.
2. Learning a new technology/Methods of research
3. CSS Styling</p>

<p>This was my first time adopting a sizable codebase. Some of the things I asked myself as I was going through were
- What does this application aim to achieve? - <strong>Purpose</strong>
- How can I get this application to work so I can test its features? - <strong>Ftability</strong>
- What potential features can I add to make this app stellar? - <strong>Future</strong></p>

<h5><em><strong>Modularity and Refactoring</strong></em></h5>

<p>As I was reading through it the first time, I realized the importance of documentation as well as modularity. Most of the code that should have been split up into many different files were placed in one file making it confusing and hard to understand what was going on. Functions names were out of place, styling was incorrect, and it made a lot of components that should have been simple to understand complex.</p>

<p>I always aim to code in a way that if I were to read my code 1 year from now I&rsquo;d be able to understand it. Doing so should allow others to understand it as well. So the first goal of the project immediately was to figure out what each components did, figure out why the application wasn&rsquo;t working as intended (because it was riddled with bugs), and <strong>refactor the code</strong>.</p>

<p>My teammates and I went through each file carefully dissecting which pieces were unneeded and what was needed. The first day was spent documenting and understanding how everything worked and fell in place. Afterwards, we worked to create a working application where all we had to do afterwards was to add features individually.</p>

<h5><em><strong>As a user I&rsquo;d like to be able to have a profile page that has information about me.</strong></em></h5>

<p>As the project went on I found myself working on user-facing features. The perspective of the the user was always a conscious thought. By coding in such a manner I found myself thinking about what a user would like which led to more and more features that would be nice to have (in other words, improve the user experience). Being a user of many websites myself, it was easy to think about what turns me off and makes me exit a website instantly.</p>

<p>Rather than overwhelming myself with all these &ldquo;neat features&rdquo; to include immediately, I incrementally added each nice feature to a ticketing system. Then, I worked on each one by one, keeping things modular, testing each feature as I progressed, and making sure it was just the way a user would like it. After a day&rsquo;s work, I reconvened with my team members to make sure the vision of the project was still intact. I also discussed with them if there were any other demanding features that came up that should be implemented first. <strong>Communication</strong> is key in making a project succeed. This was how most of the project was carried out afterwards.</p>

<h5><em><strong>CSS Styling</strong></em></h5>

<p>I found my biggest struggle in the project with the CSS. I&rsquo;ve previously read how arcane CSS is. I&rsquo;ve worked with template CSS bit by bit before, but this was the first time I was working from a true blank page. It was my first experience with creating a modular layout in which features can be implemented bit by bit while add styles. I&rsquo;ve used bootstrap before when working with small pieces. This time though, I wanted to undertake a bigger challenge and decided to learn the new CSS Grid system. It could have gone better, but I learned a fair amount about some of the limitations as well as the magic of CSS.</p>

<p>One of the most most important things I&rsquo;ve learned is <strong>try to plan as much of the layout as possible early.</strong>
Also, <strong>don&rsquo;t hardcode pixels. Use % and vw/vh.</strong>
One more thing, <strong>making a site with CSS from scratch is hard and takes practice.</strong> But it was fun!</p>

<h3>Wrap Up</h3>

<ul>
<li>Modularity, code documentation, proper styling leads to less confusion</li>
<li>This means when working with other or new teammembers it makes it easier on them to implement new features.</li>
<li>Fewer bugs this way too!</li>
<li>Importance of UI design (style) nearly matches functionality.</li>
<li>If it looks ugly, why would I use it even if it is functional?</li>
<li>Think from the perspective of a user always! What does the user want?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[greenfield]]></title>
    <link href="http://austinshin.github.io/blog/2018/01/22/greenfield/"/>
    <updated>2018-01-22T10:23:16-08:00</updated>
    <id>http://austinshin.github.io/blog/2018/01/22/greenfield</id>
    <content type="html"><![CDATA[<h2>Greenfield BlogPost</h2>

<h1><em>Legacy - Project Aircasa</em></h1>

<hr />

<h4>Demo</h4>

<p><a href="aircasa.herokuapp.com">Try Aircasa</a>
<a href="https://github.com/hrsf87-casa/aircasa">Github</a></p>

<h5>Summary</h5>

<ul>
<li>Adopted a Minimal Viable Product of a <a href="https://github.com/airbnb-clone/airbnb">Airbnb clone</a> from a group of people who worked on it previously hence the name &lsquo;Legacy&rsquo;.</li>
<li>Familiarized self with a new code base, refactored code, added multiple new features, and deployed to heroku.</li>
</ul>


<h4>Stack</h4>

<ul>
<li>React</li>
<li>Express</li>
<li>MYSQL

<h5>Features Added</h5></li>
<li>PassportJS/Bcrypt (Login Authentication)</li>
<li>Ability to host a place</li>
<li>Track current and past bookings</li>
<li>Unique profile page</li>
<li>Uploading files utilizing Amazon Web Services</li>
<li>Fetch live data via Airbnb API</li>
<li>Styling via Bootstrap and CSS Grid</li>
<li>Provide map data via Google Maps API</li>
</ul>


<h2>The Project Phase</h2>

<p>Interesting decisions/challenges encountered.
1. Adopting a new codebase, modularity, documentation, and refactoring.
2. Learning a new technology/Methods of research
3. CSS Styling</p>

<p>This was my first time adopting a sizable codebase. Some of the things I asked myself as I was going through were
- What does this application aim to achieve? - <strong>Purpose</strong>
- How can I get this application to work so I can test its features? - <strong>Ftability</strong>
- What potential features can I add to make this app stellar? - <strong>Future</strong></p>

<h5><em><strong>Modularity and Refactoring</strong></em></h5>

<p>As I was reading through it the first time, I realized the importance of documentation as well as modularity. Most of the code that should have been split up into many different files were placed in one file making it confusing and hard to understand what was going on. Functions names were out of place, styling was incorrect, and it made a lot of components that should have been simple to understand complex.</p>

<p>I always aim to code in a way that if I were to read my code 1 year from now I&rsquo;d be able to understand it. Doing so should allow others to understand it as well. So the first goal of the project immediately was to figure out what each components did, figure out why the application wasn&rsquo;t working as intended (because it was riddled with bugs), and <strong>refactor the code</strong>.</p>

<p>My teammates and I went through each file carefully dissecting which pieces were unneeded and what was needed. The first day was spent documenting and understanding how everything worked and fell in place. Afterwards, we worked to create a working application where all we had to do afterwards was to add features individually.</p>

<h5><em><strong>As a user I&rsquo;d like to be able to have a profile page that has information about me.</strong></em></h5>

<p>As the project went on I found myself working on user-facing features. The perspective of the the user was always a conscious thought. By coding in such a manner I found myself thinking about what a user would like which led to more and more features that would be nice to have (in other words, improve the user experience). Being a user of many websites myself, it was easy to think about what turns me off and makes me exit a website instantly.</p>

<p>Rather than overwhelming myself with all these &ldquo;neat features&rdquo; to include immediately, I incrementally added each nice feature to a ticketing system. Then, I worked on each one by one, keeping things modular, testing each feature as I progressed, and making sure it was just the way a user would like it. After a day&rsquo;s work, I reconvened with my team members to make sure the vision of the project was still intact. I also discussed with them if there were any other demanding features that came up that should be implemented first. <strong>Communication</strong> is key in making a project succeed. This was how most of the project was carried out afterwards.</p>

<h5><em><strong>CSS Styling</strong></em></h5>

<p>I found my biggest struggle in the project with the CSS. I&rsquo;ve previously read how arcane CSS is. I&rsquo;ve worked with template CSS bit by bit before, but this was the first time I was working from a true blank page. It was my first experience with creating a modular layout in which features can be implemented bit by bit while add styles. I&rsquo;ve used bootstrap before when working with small pieces. This time though, I wanted to undertake a bigger challenge and decided to learn the new CSS Grid system. It could have gone better, but I learned a fair amount about some of the limitations as well as the magic of CSS.</p>

<p>One of the most most important things I&rsquo;ve learned is <strong>try to plan as much of the layout as possible early.</strong>
Also, <strong>don&rsquo;t hardcode pixels. Use % and vw/vh.</strong>
One more thing, <strong>making a site with CSS from scratch is hard and takes practice.</strong> But it was fun!</p>

<h3>Wrap Up</h3>

<ul>
<li>Modularity, code documentation, proper styling leads to less confusion</li>
<li>This means when working with other or new teammembers it makes it easier on them to implement new features.</li>
<li>Fewer bugs this way too!</li>
<li>Importance of UI design (style) nearly matches functionality.</li>
<li>If it looks ugly, why would I use it even if it is functional?</li>
<li>Think from the perspective of a user always! What does the user want?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mvp]]></title>
    <link href="http://austinshin.github.io/blog/2018/01/22/mvp/"/>
    <updated>2018-01-22T10:23:10-08:00</updated>
    <id>http://austinshin.github.io/blog/2018/01/22/mvp</id>
    <content type="html"><![CDATA[<p>MVP blog post</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello]]></title>
    <link href="http://austinshin.github.io/blog/2015/11/18/hello/"/>
    <updated>2015-11-18T22:32:36-08:00</updated>
    <id>http://austinshin.github.io/blog/2015/11/18/hello</id>
    <content type="html"><![CDATA[<p>Current todo list:</p>

<p>enigami</p>
]]></content>
  </entry>
  
</feed>
